
<div class="d-flex justify-content-between m-4">
    <button title="Upload File" class="btn btn-primary" @onclick="ShowFileUploadModal">
        <i class="ri-add-line"></i> Upload File
    </button>
</div>

<div class="border rounded-2 gallery-container">
    @if (!isLoading && !files.Any())
    {
        <div>No data</div>
    }
    
    @foreach(var file in files)
    {
        <div class="gallery-container-item" @key="file.FileName" @onclick="@(() => ShowPreviewModal(file))" >
            @if (file.IsImage && !string.IsNullOrWhiteSpace(file.FileUri)) {
                <img src="@file.FileUri" title="@file.Name" class="gallery-container-item-image" />
                <div class="gallery-container-item-text">
                    @file.Name
                </div>
            } else {
                <div>@file.Name</div>
            }
            <button class="btn-delete" title="Delete" @onclick="() => ConfirmDelete(file.FileName)" @onclick:stopPropagation="true">
                <i class="ri-delete-bin-2-line"></i>
            </button>
        </div>
    }

    @if (isLoading)
    {
        <SpinnerLoading />
    }

    @if (!isLoading && hasNext)
    {
        <div class="gallery-container-item d-flex align-items-center justify-content-center">
            <button class="btn btn-link" style="font-weight: bold" @onclick="@LoadMore">Load More</button>
        </div>
    }
</div>

<FileUploadModal @ref="fileUploadModal" Title="Upload Files" OnUploadCompleted="@OnUploadCompleted"/>

<TModal Title="@previewFile.Name" @ref="previewModal" Size="TModal.ModalSize.xLarge">
    <ChildContent>
        @if (previewFile.IsImage)
        {
            <img src="@previewFile.FileUri" style="width: 100%; height: auto" title="@previewFile.FileName" />
        } else
        {
            <span>Cannot preview file. <a href="@previewFile.FileUri" target="_blank">Click here</a> to download</span>
        }
    </ChildContent>
    <Description>
        <button class="btn btn-danger" @onclick="() => ConfirmDelete(previewFile.FileName)">Delete</button>
    </Description>
    <Buttons>
        <button class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
    </Buttons>
</TModal>


<TModal Title="Delete" @ref="deleteModal" Size="TModal.ModalSize.medium">
    <ChildContent>
        <span>Are you sure you want to delete @toDeleteFileName?</span>
    </ChildContent>
    <Buttons>
        <button class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
        <button class="btn btn-danger" @onclick="DeleteFile">@(isDeleting ? "Deleting..." : "Delete")</button>
    </Buttons>
</TModal>

@code {
    [Inject]
    private IFileUploadService FileUploadService { get; set; }

    [Parameter]
    public EventCallback<FileGallerySelectEventArgs> OnFileSelected { get; set; }

    private CancellationTokenSource cts = new();
    private string paginationToken = "";
    private int pageSize = 20;
    private bool hasNext;
    private bool isLoading;

    private FileUploadModal fileUploadModal;

    private TModal previewModal;
    private FileUploadResponse previewFile = new FileUploadResponse();

    private TModal deleteModal;
    private string toDeleteFileName = "";
    private bool isDeleting;

    private List<FileUploadResponse> files = new List<FileUploadResponse>();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadData();
        }
    }

    private async Task LoadMore()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        isLoading = true;
        StateHasChanged();

        var response = await FileUploadService.GetUploadFilesAsync(paginationToken, pageSize, cts.Token);
        paginationToken = response.PaginationToken;
        hasNext = !string.IsNullOrWhiteSpace(response.PaginationToken);
        files.AddRange(response.Items);
        isLoading = false;
        StateHasChanged();
    }

    private async Task ConfirmDelete(string fileName)
    {
        if (isDeleting) return;
        toDeleteFileName = fileName;
        await deleteModal.Show();
    }

    private async Task DeleteFile()
    {
        if (isDeleting) return;

        await previewModal.Close();

        isDeleting = true;
        var file = files.SingleOrDefault(x => x.FileName.Equals(toDeleteFileName, StringComparison.InvariantCultureIgnoreCase));
        if (file != null)
        {
            await FileUploadService.DeleteFileAsync(file.FileName);
            files.Remove(file);
        }
        isDeleting = false;
        await deleteModal.Close();
    }

    private async Task ShowFileUploadModal()
    {
        await fileUploadModal.Show();
    }

    private async Task OnUploadCompleted(FileUploadResponse[] results)
    {
        var removeDuplicatedFiles = results.Where(x => !files.Any(f => f.FileName.Equals(x.FileName)));
        files.AddRange(removeDuplicatedFiles);
    }

    private async Task ShowPreviewModal(FileUploadResponse file)
    {
        if (OnFileSelected.HasDelegate)
        {
            await OnFileSelected.InvokeAsync(new FileGallerySelectEventArgs(file.FileUri, file.IsImage));
            return;
        }

        previewFile = file;
        await previewModal.Show();
    }

    public record FileGallerySelectEventArgs (string fileUrl, bool isImage);
}
