<div class="modal fade" tabindex="-1" @ref="modalRef" data-bs-backdrop="@(backDropClose ? false : "static")">
  <div class="modal-dialog modal-dialog-scrollable modal-dialog-centered">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title">@Title</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        @ChildContent
      </div>
      <div class="modal-footer">
                @if (Buttons != null)
                {
                    @Buttons
                } else
                {
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>   
                }
      </div>
    </div>
  </div>
</div>

@code {
    private ElementReference modalRef;

    [Parameter]
    public string Title { get; set; }

    [Parameter]
    public RenderFragment ChildContent { get; set; }

    [Parameter]
    public RenderFragment Buttons { get; set; }

    [Parameter]
    public bool backDropClose { get; set; } = true;


    [Inject]
    protected IJSRuntime JsRuntime { get; set; }

    public Object tag { get; set; }

    private IJSObjectReference JsModule;


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            JsModule = await JsRuntime.InvokeAsync<IJSObjectReference>("import", "/Components/TModal.razor.js");
        }
    }

    public async Task Show()
    {
        await JsModule.InvokeVoidAsync("TModal.show", modalRef);
    }

    public async Task Close()
    {
        await JsModule.InvokeVoidAsync("TModal.close", modalRef);
    }

    public async ValueTask DisposeAsync()
    {
        if (JsModule != null)
        {
            await JsModule.DisposeAsync();
        }
    }

    

}
